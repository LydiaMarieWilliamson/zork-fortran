Pending architectural reconciliations:
There are significant architectural differences between C1991 and C2021 / Fortran version:
∙	Story File:
	―	C1991 uses non-sequential files with effective record length 8 bytes, but no buffered I/O.
		The C1991 architecture cannot be directly implemented in Fortran 1977 (nor in Fortran 1990).
	―	C2021/Fortran uses buffered non-sequential files with record length 2+74 bytes.
	―	Version 3 of the Fortran source uses buffered non-sequential files with record length 4+76 bytes.
	―	The desired revision is with direct access stream files, which is present in Fortran 2003.
	Reconciliations/Upgrades:
	―	Normalizing the format of dtext.dat and rewriting the messaging routine: dsub.c, dgame.c, dtext.dat.
	―	The version numbering: Test.ex, Test.ex0, dtext.dat.
∙	Random Number Generator:
	―	C1991 uses srand() and rand(), which is not directly supported in Fortran 77.
	―	Version 2.6 of the Fortran source uses custom functions INIRND and RND, which are not properly validated.
	―	C2021 used this Fortran version and has been temporarily replaced by what the C1991 version used.
	―	Version 3 of the Fortran source uses non-standard SRAND and RAND.
	―	The desired revision is a high-quality, properly-validated random number generator,
		(P.L'Ecuyer, ‟Efficient and portable combined random number generators”, CACM 31(6), June 1988, 742-751)
		with a time-date random number seed routine, and the ability to specify the seed at the command line.
	―	To remove variability in the test outputs, random number seeds are to be specified by the test routines.
	Reconciliations/Upgrades:
	―	Command-line arguments & settable random number seeds: Test.in, Test.ex, Test.ex0, Makefile, dinit.c (call to inirnd()).
	―	Inclusion of a more comprehensive test suite: Test.*, Makefile.
Other pending reconciliations:
∙	Enabling flags: dsub.c, Makefile.
∙	The documentation: README

Pending recoding ― for both the C and Fortran versions:
∙	Integration of Fortran version 3.2.
∙	Removal of system-generated locals.
∙	Synthesis of control-flow structures (e.g. Fortran 1990 has SELECT CASE & CASE, Fortran 1977 has IF & END IF).
∙	Synthesis of data structures for the tables (Fortran 1990 has structured TYPE's).
∙	Synthesis of enum types (Fortran 2003 has ENUMERATOR & ENUM)
∙	Synthesis of constants (Fortran 1977 has PARAMETER)
∙	Lifting of structure indexes to structure pointers (Fortran 1990 has POINTER).
∙	Inclusion of maps and other paraphenilia.
Longer-term items:
∙	Further translation to C++, so that equivalences can be more directly handled.
∙	Re-fitting of the terminal I/O to GUI I/O (possibly with QT ... which uses C++).
∙	Integration of maps and graphics.
∙	Expansion and generalization of the natural language I/O.
∙	Translation to other languages.
∙	Dynamic worlds & possibly also parallel worlds.
